draw_loading_bar(++current_step, total_steps, draw_x, draw_y, VBE_RGB(255, 0, 0), 2);

    // Initialize Physical Memory Manager
    size_t size = (g_kmap.available.size / 2) + 10;
    uint32_t pmm_start = (uint32_t)g_kmap.available.start_addr;
    asm("cli");
    printf_t("Initiating physical memory manager\n");
    init_pmm_page(pmm_start, g_kmap.available.size);
    draw_loading_bar(++current_step, total_steps, draw_x, draw_y, VBE_RGB(255, 0, 0), 2);
    printf_t("Initializing Virtual Memory Manager\n");
    // Initialize Virtual Memory Manager
    init_vmm();
    LOG_LOCATION;

    // Collect pages for Physical Memory Manager
    pmm_collect_pages(mboot_info);

    // Map VESA memory
    map_vesa();
    LOG_LOCATION;

    // Initialize kernel heap
    printf_t("Initializing kernel heap\n");
    init_kheap(g_kmap.available.size);
    
    draw_loading_bar(++current_step, total_steps, draw_x, draw_y, VBE_RGB(255, 0, 0), 2);
    printf_t("Scanning PCI\n");
    pci_scan();
    draw_loading_bar(++current_step, total_steps, draw_x, draw_y, VBE_RGB(255, 0, 0), 2);
    printf_t("Attempting to initialize AHCI driver\n");
    init_storage();
    draw_loading_bar(++current_step, total_steps, draw_x, draw_y, VBE_RGB(255, 0, 0), 2);
    // Initialize FAT file system
    printf_t("Init keyboard\n");
    keyboard_init();
    draw_loading_bar(++current_step, total_steps, draw_x, draw_y, VBE_RGB(255, 0, 0), 2);
    STI();
    printf_t("Initialize FAT file system\n");

    int fs_init = init_file_system(config.default_drive);
    if(fs_init == -1)
    {
        printf("Failed to init filesystem for drive %d\n",config.default_drive);
    }
    CLI();
    LOG_LOCATION;
    draw_loading_bar(++current_step, total_steps, draw_x, draw_y, VBE_RGB(255, 0, 0), 2);
    

    // Initialize timer
    // printf("Initializing timer\n");
    timer_init();
    draw_loading_bar(++current_step, total_steps, draw_x, draw_y, VBE_RGB(255, 0, 0), 2);

    LOG_LOCATION;
    

    int ret_buf = vesa_init_buffers();
    dbgprintf("%d\n", ret_buf);
    char *test_malloc = malloc(1024 * 1024 * 1024);
    if (test_malloc == NULL) {
        printf("\033[1;31mCouldn't allocate test memory\n"); // Set text color to red
    } else {
        printf_debug("\033[1;32mSuccessfully allocated memory of 1GB\n"); // Set text color to green
    }
    LOG_LOCATION;

    // Free allocated memory
    const char *test_b = "This allocated memory";
    strcpy(test_malloc, test_b);
    if (strcmp(test_b, test_malloc) != 0) {
        printf("\033[1;31mMapping of test allocation may have failed\n"); // Set text color to red
    }
    free(test_malloc);
    draw_loading_bar(++current_step, total_steps, draw_x, draw_y, VBE_RGB(255, 0, 0), 2);

    LOG_LOCATION;

    

    int num_programs;
    int num_program_dirs;
    fl_count_files(config.program_path, &num_program_dirs, &num_programs);
    Entry *programs = malloc(sizeof(Entry) * num_programs);
    int num_programs_check;
    fl_populate_file_list(config.program_path, programs, &num_programs_check);
    if (num_programs_check != num_programs) {
        printf("\033[1;31mError getting list of programs\n"); // Set text color to red
    } else {
        fill_program_list(num_programs, programs);
    }
    printf("Loaded %d programs\n", num_programs);
    

    printf("\033[1;32mSystem Initialization Complete\n"); // Set text color to green
    printf("System Info:\n");

    uint64_t ram_size = mboot_info->mem_low + mboot_info->mem_high;
    // printf("%u bytes",ram_size); //3145215
    if (ram_size <= 1048063)
    {
        printf("ERROR: Inadequate memory. This OS requires more than 1GB of RAM to run.\n");
        printf("Please increase memory and try again.\n");
        printf("The system will now hang.\n");
        for (;;); // Infinite loop to halt the system
    }
    // char *ram_size_str = formatBytes64(ram_size);
    print_ram_size(ram_size);
    char *allocation_heap = formatBytes(g_kmap.available.size);
    printf("-\tAllocation heap size: %u Kilobytes (%s)\n", g_kmap.available.size / 1024,allocation_heap);

    char cpu_name[49];
    char architecture[5];
    unsigned int family, model, stepping;
    get_cpu_info(cpu_name, architecture, &family, &model, &stepping);
    //  printf("CPU Manufacturer: %s\n", sys_info.cpu_info.manufacturer);
    // printf("CPU Model: %s\n", sys_info.cpu_info.model_name);
    // printf("CPU Cores: %d\n", sys_info.cpu_info.cores);
    // printf("CPU Frequency: %u MHz\n", sys_info.cpu_info.frequency);
    printf("-\tCPU Name: %s\n", cpu_name);
    printf("-\tArchitecture: %s\n", architecture);
    printf("-\tFamily: %d, Model: %d, Stepping: %d\n", family, model, stepping);
    printf("-\tScreen resolution: %dx%d\n", width, height);

    // const char *acpi_status = (acpi == 0) ? "true" : "false";
    if(acpi != 0)
    {
        
    }
    // const char *acpi_status = (acpi == 0) ? "\x1b[32mtrue\x1b[0m":"\x1b[31mFALSE\x1b[0m";
    // printf("-\tACPI enabled: %s\n", acpi_status);
    const char *acpi_status2 = (acpi == 0) ? "\x1b[34mtrue\x1b[0m" : "\x1b[31mFALSE\x1b[0m";
    printf("-\tACPI enabled: %s\n", acpi_status2);

    printf("\033[0m"); // Reset text formatting and colors

    printf("Device Info:\n");
    print_pci_devices();
    printf("Available drives\n");
    list_devices();

    

    printf("Starting shell\n");
    if(strcmp(grub_command_line,"install")==0)
    {   
        printf("Installing\n");
        write_first_module_to_file(mboot_info);
        install_athenx();

    }